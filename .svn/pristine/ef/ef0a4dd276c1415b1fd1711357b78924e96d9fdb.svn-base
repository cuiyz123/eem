package com.metarnet.eomeem.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimpleDateFormatSerializer;
import com.metarnet.core.common.controller.BaseController;
import com.metarnet.core.common.exception.ServiceException;
import com.metarnet.core.common.exception.UIException;
import com.metarnet.core.common.model.Pager;
import com.metarnet.core.common.utils.PagerPropertyUtils;
import com.metarnet.eomeem.model.EemNoticeEntity;
import com.metarnet.eomeem.service.IEemNoticeService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Timestamp;

/**
 * Created by Administrator on 2016/7/6.
 */
@Controller
public class EemNoticeController extends BaseController {
    @Resource
    private IEemNoticeService eemNoticeService;

    @RequestMapping(value = "/eemNoticeController.do", params = "method=queryNoticeList")
    @ResponseBody
    public void queryNoticeList(HttpServletResponse response, HttpServletRequest request) throws UIException {
        try {
            Pager pager = PagerPropertyUtils.copy(request.getParameter("dtGridPager"));
            pager = eemNoticeService.queryNoticeList(pager, getUserEntity(request));
            SerializeConfig ser = new SerializeConfig();
            ser.put(Timestamp.class, new SimpleDateFormatSerializer("yyyy-MM-dd HH:mm:ss"));
            endHandle(request, response, JSON.toJSONString(pager, ser, SerializerFeature.WriteNullListAsEmpty), "queryTemplateList");
        } catch (Exception e) {
            throw new UIException("queryTemplateList", e);
        }
    }

    @RequestMapping(value = "/eemNoticeController.do", params = "method=saveNotice")
    @ResponseBody
    public void saveNotice(EemNoticeEntity eemNoticeEntity,String deptCodes, HttpServletRequest request, HttpServletResponse response) throws UIException {
        JSONObject jsonObject = new JSONObject();
        try {
            String result = eemNoticeService.saveNotice(eemNoticeEntity,deptCodes, getUserEntity(request));
            if (StringUtils.isBlank(result)) {
                jsonObject.put("success", true);
            } else {
                jsonObject.put("success", false);
                jsonObject.put("msg", result);
            }
        } catch (ServiceException e) {
            e.printStackTrace();
        }
        endHandle(request, response, jsonObject, eemNoticeEntity.getTheme().toString());
    }

    @RequestMapping(value = "/eemNoticeController.do", params = "method=showNotice")
    @ResponseBody
    public void showNotice(Long objectID, HttpServletRequest request, HttpServletResponse response) throws UIException {
        JSONObject jsonObject = new JSONObject();
        try {
            EemNoticeEntity eemNoticeEntity = eemNoticeService.showNotice(objectID, getUserEntity(request));
            jsonObject.put("success", true);
            jsonObject.put("eemNoticeEntity", eemNoticeEntity);
        } catch (ServiceException e) {
            e.printStackTrace();
        }
        SerializeConfig ser = new SerializeConfig();
        ser.put(Timestamp.class, new SimpleDateFormatSerializer("yyyy-MM-dd"));
        endHandle(request, response, JSON.toJSONString(jsonObject, ser, SerializerFeature.WriteNullListAsEmpty), objectID.toString());
    }

    @RequestMapping(value = "/eemNoticeController.do", params = "method=deleteNotice")
    @ResponseBody
    public void deleteNotice(Long objectID, HttpServletRequest request, HttpServletResponse response) throws UIException {
        JSONObject jsonObject = new JSONObject();
        try {
            eemNoticeService.deleteNotice(objectID, getUserEntity(request));
            jsonObject.put("success", true);
        } catch (ServiceException e) {
            e.printStackTrace();
        }
        endHandle(request, response, jsonObject, objectID.toString());
    }

    @RequestMapping(value = "/eemNoticeController.do", params = "method=updateTopNotice")
    @ResponseBody
    public void updateTopNotice(Long objectID, HttpServletRequest request, HttpServletResponse response) throws UIException {
        JSONObject jsonObject = new JSONObject();
        try {
            eemNoticeService.updateTopNotice(objectID, getUserEntity(request));
            jsonObject.put("success", true);
        } catch (ServiceException e) {
            e.printStackTrace();
        }
        endHandle(request, response, jsonObject, objectID.toString());
    }
}
